version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # rabbitmq server
      - "15672:15672" # management UI
    networks:
      - app-network
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"] # Command to check RabbitMQ health
      interval: 30s # How often to run the check
      timeout: 10s # Maximum time allowed for the command to complete
      retries: 5 # Number of consecutive failures before marking as unhealthy
      start_period: 10s # Time to wait before starting health checks  
    restart: unless-stopped

  postgres:
    container_name: postgres_container
    # image: docker.arvancloud.ir/postgres:17
    image: postgres:17
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER:-postgres}'"]
      interval: 30s
      timeout: 10s
      start_period: 5s
      retries: 5  
    networks:
      - app-network
    restart: unless-stopped
    expose:
      - 5432

  chat:
    build:
      context: ../services/chat-service
      dockerfile: Dockerfile
    container_name: chat-service
    ports:
      - "8001:80"
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.chat.rule=Host(`chat.localhost`)"
      - "traefik.http.services.chat.loadbalancer.server.port=80"
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy

networks:
  app-network:
    driver: bridge
